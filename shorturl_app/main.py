from fastapi import FastAPI, Depends, HTTPException
from fastapi.responses import RedirectResponse
from sqlalchemy.orm import Session
from database import engine, get_db, Base
from models import URL
import random
import string

app = FastAPI(
    title="Short URL Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è URL-–∞–¥—Ä–µ—Å–æ–≤ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. üöÄ",
    version="1.0.0",
    openapi_tags=[
        {
            "name": "Short URL Management",
            "description": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ URL: —Å–æ–∑–¥–∞–Ω–∏–µ, —Ä–µ–¥–∏—Ä–µ–∫—Ç, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."
        }
    ]
)

Base.metadata.create_all(bind=engine)

def generate_short_id(db: Session):
    while True:
        short_id = ''.join(random.choices(string.ascii_letters + string.digits, k=6))
        if not db.query(URL).filter(URL.short_id == short_id).first():
            return short_id

@app.post(
    "/urls",
    summary="–°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É",
    description="–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ URL.",
    tags=["Short URL Management"]
)
def create_short_url(full_url: str, db: Session = Depends(get_db)):
    short_id = generate_short_id(db)
    db_url = URL(short_id=short_id, full_url=full_url)
    db.add(db_url)
    db.commit()
    db.refresh(db_url)
    return {
        "short_id": db_url.short_id,
        "full_url": db_url.full_url
    }

@app.get(
    "/{short_id}",
    summary="–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ",
    description="–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–ª–Ω—ã–π URL, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ—Ä–æ—Ç–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.",
    tags=["Short URL Management"]
)
def redirect_to_url(short_id: str, db: Session = Depends(get_db)):
    db_url = db.query(URL).filter(URL.short_id == short_id).first()
    if not db_url:
        raise HTTPException(status_code=404, detail="URL not found")

    db_url.clicks += 1
    db.commit()
    db.refresh(db_url)

    return RedirectResponse(url=db_url.full_url)

@app.get(
    "/stats/{short_id}",
    summary="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–µ, –≤–∫–ª—é—á–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤.",
    tags=["Short URL Management"]
)
def get_url_stats(short_id: str, db: Session = Depends(get_db)):
    db_url = db.query(URL).filter(URL.short_id == short_id).first()
    if not db_url:
        raise HTTPException(status_code=404, detail="URL not found")

    return {
        "short_id": db_url.short_id,
        "full_url": db_url.full_url,
        "clicks": db_url.clicks
    }
